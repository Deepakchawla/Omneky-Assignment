# -*- coding: utf-8 -*-
"""Omneky (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1luE0LzKNBy3wdSjCecTp9UR4AiH11WHY
"""

import pandas as pd 
import numpy as np 
import seaborn as sb
import time 


train = pd.read_csv("training_data.csv")
test = pd.read_csv('test_data.csv')

train['created_at'] = pd.to_datetime(train['created_at'], errors='coerce')
test['created_at'] = pd.to_datetime(test['created_at'], errors='coerce')
test = test.loc[:, ~test.columns.str.contains('^Unnamed')]

train.sample(9)

"""## Info about dataset"""

train.describe().T

test.describe().T

train.info()

"""## Visualize Age Group"""

train['age_group'].value_counts().plot(kind='pie',figsize=(9,7))

train['age_group'].value_counts().plot(kind='box',figsize=(9,7))

"""## Visualize Lab Parameter"""

train['standard_lab_parameter_name'].value_counts().plot(kind='box',figsize=(9,7))

train['standard_lab_parameter_name'].value_counts().plot(kind='pie',figsize=(9,7))

"""## Visualize Units in dataset"""

train.unit.value_counts().plot(kind='bar',figsize=(11,7))

"""## Visualize unit and lab parameters"""

train.groupby(['standard_lab_parameter_name',"unit"]).agg({"unit":"count"}).plot(kind='bar',figsize=(11,9))

# train.drop(['patient_id'],axis=1,inplace=True)
# test.drop(['patient_id'],axis=1,inplace=True)

train.hist(figsize=(10,8))

"""## Plotting  Correlation"""

sb.heatmap(train.corr(), annot = True)

train['gender'].value_counts().plot(kind='bar',figsize=(7,5))

#Chlorine

train.standard_lab_parameter_name.value_counts().plot(kind='bar',figsize=(7,5))

"""## Organizing data in model training format"""

train.drop(['created_at','patient_id'],axis=1,inplace=True)

gender_encode = {'male': 1,'female': 0}
train['gender'] = train['gender'].str.lower()

train['gender'] = train['gender'].replace(gender_encode)

x = train.drop(['gender'],axis=1)
x = pd.get_dummies(x) 
y = train['gender']

from sklearn.model_selection import train_test_split
x_train,x_test, y_train, y_test = train_test_split(x,y,test_size=0.20,random_state=2)

# train['Year'] = train['created_at'].dt.year
# train['Month'] = train['created_at'].dt.month
# train['Day'] = train['created_at'].dt.day

x_train.shape,  y_train.shape

"""## Using RandomForest to train model"""

from sklearn.ensemble import RandomForestClassifier
clf=RandomForestClassifier(n_estimators=100)
clf.fit(x_train,y_train)

y_pred=clf.predict(x_test)

#Import scikit-learn metrics module for accuracy calculation
from sklearn import metrics
# Model Accuracy, how often is the classifier correct?
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))

from sklearn.model_selection import learning_curve
sizes, training_scores, testing_scores = learning_curve(clf, x, y, cv=10, scoring='accuracy', train_sizes=np.linspace(0.01, 1.0, 50))

import matplotlib.pyplot as plt

# Mean and Standard Deviation of training scores
mean_training = np.mean(training_scores, axis=1)
Standard_Deviation_training = np.std(training_scores, axis=1)
  
# Mean and Standard Deviation of testing scores
mean_testing = np.mean(testing_scores, axis=1)
Standard_Deviation_testing = np.std(testing_scores, axis=1)
  
# dotted blue line is for training scores and green line is for cross-validation score
plt.plot(sizes, mean_training, '--', color="b",  label="Training score")
plt.plot(sizes, mean_testing, color="g", label="Cross-validation score")
  
# Drawing plot
plt.title("LEARNING CURVE FOR KNN Classifier")
plt.xlabel("Training Set Size"), plt.ylabel("Accuracy Score"), plt.legend(loc="best")
plt.tight_layout()
plt.show()

"""## Chloride Analysis"""

train = pd.read_csv("training_data.csv")
test = pd.read_csv('test_data.csv')

test = test.loc[:, ~test.columns.str.contains('^Unnamed')]


data = pd.concat([train,test],axis=0)
data.sample(5)

data = data.loc[data['standard_lab_parameter_name']=='Chloride']
data.sample(5)

data.groupby(['gender']).agg({'standard_lab_parameter_name':'count'}).plot(kind='bar',figsize=(7,5))

data_chloride_108_value = data.loc[data['parameter_value'] > 108]
data_chloride_108_value.groupby(['gender']).agg({'standard_lab_parameter_name':'count'})

data_chloride_108_value.groupby(['gender']).agg({'standard_lab_parameter_name':'count'}).plot(kind='bar',figsize=(7,5))

data_chloride_95_value = data.loc[data['parameter_value'] < 95]
data_chloride_95_value.groupby(['gender']).agg({'standard_lab_parameter_name':'count'})

data_chloride_95_value.groupby(['gender']).agg({'standard_lab_parameter_name':'count'}).plot(kind='bar',figsize=(7,5))

data.groupby(['gender']).agg({'standard_lab_parameter_name':'count'}).plot(kind='bar',figsize=(7,5))

data.groupby(['age_group']).agg({'standard_lab_parameter_name':'count'})

"""## WBC Analysis"""

train = pd.read_csv("training_data.csv")
test = pd.read_csv('test_data.csv')

test = test.loc[:, ~test.columns.str.contains('^Unnamed')]


data = pd.concat([train,test],axis=0)
data.sample(5)

data = data.loc[data['standard_lab_parameter_name']=='WBC']
data.sample(5)

data.groupby(['age_group']).agg({'standard_lab_parameter_name':'count'}).plot(kind='bar',figsize=(7,5))

"""## T4 Analysis"""

train = pd.read_csv("training_data.csv")
test = pd.read_csv('test_data.csv')

test = test.loc[:, ~test.columns.str.contains('^Unnamed')]


data = pd.concat([train,test],axis=0)
data.sample(5)

data = data.loc[data['standard_lab_parameter_name']=='T4']
data.sample(5)

data.groupby(['age_group']).agg({'standard_lab_parameter_name':'count'}).plot(kind='bar',figsize=(7,5))

